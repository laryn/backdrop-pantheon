<?php
/**
 * @file
 * Install, update and uninstall functions for the book module.
 */

/**
 * Implements hook_install().
 */
function book_install() {
  // Add the node type.
  _book_install_type_create();
}

/**
 * Implements hook_uninstall().
 */
function book_uninstall() {
  // Delete menu links.
  db_delete('menu_links')
    ->condition('module', 'book')
    ->execute();
  menu_cache_clear_all();
}

/**
 * Creates the book content type.
 */
function _book_install_type_create() {
  // Create an additional node type.
  $book_node_type = (object) array(
    'type' => 'book',
    'name' => t('Book page'),
    'base' => 'node_content',
    'description' => t('<em>Books</em> have a built-in hierarchical navigation. Use for handbooks or tutorials.'),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'is_new' => TRUE,
    'settings' => array(
      'promote_enabled' => FALSE,
    ),
  );

  node_type_save($book_node_type);
  node_add_body_field($book_node_type);
}

/**
 * Implements hook_schema().
 */
function book_schema() {
  $schema['cache_book'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_book']['description'] = 'Cache table for Book to store book navigation data.';

  $schema['book'] = array(
  'description' => 'Stores book outline information. Uniquely connects each node in the outline to a link in {menu_links}',
    'fields' => array(
      'mlid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => "The book page's {menu_links}.mlid.",
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => "The book page's {node}.nid.",
      ),
      'bid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => "The book ID is the {book}.nid of the top-level page.",
      ),
    ),
    'primary key' => array('mlid'),
    'unique keys' => array(
      'nid' => array('nid'),
    ),
    'indexes' => array(
      'bid' => array('bid'),
    ),
  );

  return $schema;
}

/**
 * @defgroup updates-7.x-to-1.x Updates from 7.x to 1.x
 * @{
 * Update functions from Drupal 7.x to Backdrop CMS 1.x.
 */

/**
 * Move book settings from variables to config.
 */
function book_update_1000() {
  // Migrate variables to config.
  $config = config('book.settings');
  $config->set('book_allowed_types', update_variable_get('book_allowed_types', array('book')));
  $config->set('book_child_type', update_variable_get('book_child_type', 'book'));
  $config->set('book_block_mode', update_variable_get('book_block_mode', 'all pages'));
  $config->save();

  // Delete variables.
  update_variable_del('book_allowed_types');
  update_variable_del('book_child_type');
  update_variable_del('book_block_mode');
}

/**
 * Add options for navigation and links.
 */
function book_update_1001() {
  $config = config('book.settings');
  $config->set('book_navigation', 1);
  $config->set('book_navigation_options', array('tree', 'pager'));
  $config->set('book_links', array('book_add_child'));
  $config->save();
}

/**
 * Add option for reorder link.
 */
function book_update_1002() {
  $config = config('book.settings');
  $book_links = $config->get('book_links');
  if (isset($book_links['book_add_child'])) {
    $book_links['book_reorder'] = 'book_reorder';
  }
  else {
    $book_links[] = 'book_reorder';
  }
  $config->set('book_links', $book_links);
  $config->save();
}

/**
 * Add option for dis-allowing books for all content types.
 */
function book_update_1003() {
  $config = config('book.settings');
  if ($config->get('book_admin_allowed_all') === NULL) {
    $config->set('book_admin_allowed_all', 1);
    $config->save();
  }
}

/**
 * Uninstall the book_cache contrib module, now part of core.
 */
function book_update_1004() {
  $module = db_query("SELECT name FROM {system} WHERE name = 'book_cache' AND type = 'module'")->fetchField();
  if ($module) {
    $path = backdrop_get_path('module', 'book_cache');
    backdrop_set_message(t('The contributed module <em>Book Cache</em> has been located at %path. The module has been disabled, since its functionality is now provided by Backdrop core. It is recommended that you remove this module from your site.', array('%path' => BACKDROP_ROOT . '/' . $path)), 'warning');
    // Remove the entry for the Book Cache module from the system table.
    // As this module does not provide any config or settings, there doesn't
    // seem to be anything else left to clean up or migrate.
    // While the contrib module remains in the filesystem, this entry will be
    // recreated, but it will have status 0 (disabled), and schema -1
    // (uninstalled), so it is safe to remove.
    db_query("DELETE FROM {system} WHERE name = 'book_cache' AND type = 'module'");
  }
  else {
    return t('<em>Book Cache</em> module not found. Nothing to be done.');
  }
}

/**
 * Creates the table to enable caching of Book navigation.
 */
function book_update_1005() {
  $table = backdrop_get_schema_unprocessed('system', 'cache');
  $table['description'] = "Cache table for Book to store book navigation data.";
  if (db_table_exists('cache_book')) {
    db_drop_table('cache_book');
  }
  db_create_table('cache_book', $table);
}

/**
 * @} End of "defgroup updates-7.x-to-1.x"
 * The next series of updates should start at 2000.
 */
